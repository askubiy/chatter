#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('chatter:server');
var http = require('http');
var Room = require('../models/room');
var _ = require('underscore');
var xssFilters = require('xss-filters');
var date = require('date-and-time');
var dl = require('delivery');
var fs = require('fs');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('socket.io').listen(server);

io.on('connection', function(socket){
  
  var delivery = dl.listen(socket);
  
  delivery.on('receive.success', function(file){
    var params = file.params;
    var uploadFolder = "/public/uploads/"
    fs.writeFile("." + uploadFolder + file.name, file.buffer, function(err){
      if (err){
        console.log('File could not be saved.');
      } else {
        io.to(params.roomId).emit("systemMessage", socket.userName + 
          " sent a file: " + "<a href='/uploads/" + file.name + "' target='_blank'>" + file.name + "</a>");
        console.log('File saved.');
      };
    });
  });
  
  socket.on("roomConnect", function(roomConnectionData){
    socket.join(roomConnectionData.roomId);
    socket.userName = roomConnectionData.userName;
    socket.roomId = roomConnectionData.roomId;
    addUserToRoom(socket.userName, socket.id, socket.roomId, function(){
      io.to(socket.roomId).emit("systemMessage", socket.userName + " entered the room");
      getRoomlistInfo(function(roomList) {
        io.emit("roomListInfoUdate", roomList);
      });
    });
    
  });
  
  socket.on("getRoomlistInfo", function(){
    getRoomlistInfo(function(roomList) {
      io.emit("roomListInfoUdate", roomList);
    });
  });
  
  socket.on("message", function(data){
    data.msg = xssFilters.inHTMLData(data.msg);
    var message = {
      userName: socket.userName,
      timestamp: data.timestamp,
      msg: data.msg 
    }
    addMessageToRoom(socket.roomId, message);
    io.to(socket.roomId).emit("message", data);
  });
  
  socket.on("disconnect", function(){
    if (socket.userName && socket.roomId) {
        removeUserFromRoom(socket.id, socket.roomId, function(){
        io.to(socket.roomId).emit("systemMessage", socket.userName + " left the room");
        getRoomlistInfo(function(roomList) {
          io.emit("roomListInfoUdate", roomList);
        })
      });
    }
  });
  
});

function getRoomlistInfo(callback) {
  Room.find({}, function (err, rooms) {
    var roomList = _.map(rooms, function(room){
      return {roomId: room._id, usersCount: room.users.length };
    });
    callback(roomList);
  });
}


function addUserToRoom(userName, socketId, roomId, callback) {
  var user = {
    userName: userName,
    socketId: socketId
  }
  
  Room.findOne({ _id: roomId }, function (err, room) {
    if (err) return console.error(err);
    if (room) {
      room.users.push(user);
      room.save(function (err, updatedRoom) {
        if (err) return console.error(err);
        callback(room);
      });
    }
  });
}

function removeUserFromRoom (socketId, roomId, callback) {
  Room.findOne({ _id: roomId }, function (err, room) {
    if (err) return console.error(err);
    if (room) {
      room.users = _.reject(room.users, function(user) {
        return user.socketId == socketId;
      });
      room.save(function (err, updatedRoom) {
        if (err) return console.error(err);
        callback(room);
      });
    }
  });
}

function addMessageToRoom (roomId, message) {
  Room.findOne({ _id: roomId }, function (err, room) {
    if (err) return console.error(err);
    if (room) {
      room.messages.push(message);
      room.save(function (err, updatedRoom) {
        if (err) return console.error(err);
      });
    }
  });
}

function clearAllRoomsOnServerStart (callbackFn){
  Room.find({}, function (err, rooms){
    if (err) return console.error(err);
    _.each(rooms, function (room) {
      room.users = [];
      room.messages = [];
      room.save(function (err, updatedRoom){
        if (err) return console.error(err);
        callbackFn();
      });
    });
  });
}

/**
 * Listen on provided port, on all network interfaces.
 */
clearAllRoomsOnServerStart(function () {
  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);
});


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
